<?php

namespace CLADevs\VanillaX\items\types;

use CLADevs\VanillaX\entities\projectile\TridentEntity;
use CLADevs\VanillaX\session\Session;
use pocketmine\data\bedrock\EnchantmentIdMap;
use pocketmine\data\bedrock\EnchantmentIds;
use pocketmine\entity\Entity;
use pocketmine\entity\Location;
use pocketmine\item\Durable;
use pocketmine\item\enchantment\Enchantment;
use pocketmine\item\ItemIdentifier;
use pocketmine\item\ItemIds;
use pocketmine\item\ItemUseResult;
use pocketmine\player\Player;

class TridentItem extends Durable{

    public function __construct(){
        parent::__construct(new ItemIdentifier(ItemIds::TRIDENT, 0), "Trident");
    }

    public function onReleaseUsing(Player $player): ItemUseResult{
        if(!$this->hasEnchantment(EnchantmentIdMap::getInstance()->fromId(EnchantmentIds::RIPTIDE))){
            $this->spawnTride($player);
        }
        return parent::onReleaseUsing($player); // TODO: Change the autogenerated stub
    }

    public function spawnTride(Player $player): void{
        $this->applyDamage(1);

        $diff = $player->getItemUseDuration();
        $p = $diff / 20;
        $baseForce = min((($p ** 2) + $p * 2) / 2, 1);
        $yaw = ($player->getLocation()->yaw > 180 ? 360 : 0) - $player->getLocation()->yaw;
        $entity = new TridentEntity(Location::fromObject($player->getPosition()->add(0, $player->getEyeHeight(), 0), $player->getWorld(), $yaw, -$player->getLocation()->pitch), $player);
        $entity->setParent(clone $this);
        $entity->setOwningEntity($player);
        $entity->setMotion($entity->getMotion()->multiply($baseForce * 2));
        $entity->spawnToAll();
        Session::playSound($player, "item.trident.throw");
        $this->pop();
        $player->getInventory()->setItemInHand($this);
    }

    public function getMaxStackSize(): int{
        return 1;
    }

    public function getMaxDurability(): int{
        return 250;
    }
}